BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE medical_records CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE appointments CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE users CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE doctors CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE patients CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE notifications CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN NULL; 
END;
/

CREATE TABLE patients (
    patient_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR2(50) NOT NULL CHECK (REGEXP_LIKE(first_name, '^[A-Za-z]+$', 'i')), 
    last_name VARCHAR2(50) NOT NULL CHECK (REGEXP_LIKE(last_name, '^[A-Za-z]+$', 'i')),  
    dob DATE NOT NULL,
    gender CHAR(1) CHECK (gender IN ('M', 'F', 'O')),
    contact_info VARCHAR2(11) NOT NULL CHECK (REGEXP_LIKE(contact_info, '^[0-9]{11}$')), 
    email VARCHAR2(100) UNIQUE NOT NULL CHECK (REGEXP_LIKE(email, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.com$', 'i')), 
    insurance_policy VARCHAR2(50) NULL
);

CREATE TABLE doctors (
    doctor_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR2(50) NOT NULL CHECK (REGEXP_LIKE(first_name, '^[A-Za-z]+$', 'i')), 
    last_name VARCHAR2(50) NOT NULL CHECK (REGEXP_LIKE(last_name, '^[A-Za-z]+$', 'i')),  
    specialization VARCHAR2(100) NOT NULL,
    contact_info VARCHAR2(11) NOT NULL CHECK (REGEXP_LIKE(contact_info, '^[0-9]{11}$')), 
    email VARCHAR2(100) UNIQUE NOT NULL CHECK (REGEXP_LIKE(email, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.com$', 'i')) 
);

CREATE OR REPLACE TRIGGER trg_patients_contact_email
BEFORE INSERT OR UPDATE ON patients
FOR EACH ROW
BEGIN
    IF NOT REGEXP_LIKE(:NEW.contact_info, '^[0-9]{11}$') THEN
        RAISE_APPLICATION_ERROR(-20001, 'Contact number must be exactly 11 digits and contain no alphabets.');
    END IF;

    IF NOT REGEXP_LIKE(:NEW.email, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.com$', 'i') THEN
        RAISE_APPLICATION_ERROR(-20002, 'Email must contain a valid format with @ and .com');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_doctors_contact_email
BEFORE INSERT OR UPDATE ON doctors
FOR EACH ROW
BEGIN
    IF NOT REGEXP_LIKE(:NEW.contact_info, '^[0-9]{11}$') THEN
        RAISE_APPLICATION_ERROR(-20003, 'Contact number must be exactly 11 digits and contain no alphabets.');
    END IF;

    IF NOT REGEXP_LIKE(:NEW.email, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.com$', 'i') THEN
        RAISE_APPLICATION_ERROR(-20004, 'Email must contain a valid format with @ and .com');
    END IF;
END;
/


CREATE TABLE appointments (
    appointment_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    patient_id NUMBER NOT NULL REFERENCES patients(patient_id) ON DELETE CASCADE,
    doctor_id NUMBER NOT NULL REFERENCES doctors(doctor_id) ON DELETE SET NULL,
    appointment_date DATE NOT NULL,
    reason VARCHAR2(255),
    status VARCHAR2(20) CHECK (status IN ('Scheduled', 'Completed', 'Canceled')),
    CONSTRAINT appointment_unique UNIQUE (patient_id, doctor_id, appointment_date)
);

CREATE TABLE users (
    user_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR2(50) UNIQUE NOT NULL,
    password_hash VARCHAR2(255) NOT NULL,
    role VARCHAR2(20) CHECK (role IN ('Physician', 'Admin', 'Patient')),
    linked_patient_id NUMBER NULL REFERENCES patients(patient_id) ON DELETE CASCADE
);

CREATE TABLE medical_records (
    record_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    patient_id NUMBER NOT NULL REFERENCES patients(patient_id) ON DELETE CASCADE,
    doctor_id NUMBER NOT NULL REFERENCES doctors(doctor_id),
    diagnosis VARCHAR2(255) NOT NULL,
    treatment VARCHAR2(255) NOT NULL,
    record_date DATE DEFAULT SYSDATE
);

CREATE TABLE notifications (
    notification_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    message VARCHAR2(255) NOT NULL,
    notification_date DATE DEFAULT SYSDATE
);

CREATE INDEX idx_patient_last_name ON patients(last_name);
CREATE INDEX idx_doctor_specialization ON doctors(specialization);
CREATE INDEX idx_appointment_status ON appointments(status);

CREATE OR REPLACE TRIGGER insurance_update_notify
AFTER UPDATE OF insurance_policy ON patients
FOR EACH ROW
BEGIN
    INSERT INTO notifications (message, notification_date)
    VALUES ('Patient ' || :OLD.patient_id || ' updated insurance information.', SYSDATE);
END;
/

CREATE OR REPLACE PROCEDURE add_patient (
    p_first_name IN VARCHAR2,
    p_last_name IN VARCHAR2,
    p_dob IN DATE,
    p_gender IN CHAR,
    p_contact_info IN VARCHAR2,
    p_email IN VARCHAR2,
    p_insurance_policy IN VARCHAR2
) AS
BEGIN
    INSERT INTO patients (first_name, last_name, dob, gender, contact_info, email, insurance_policy)
    VALUES (p_first_name, p_last_name, p_dob, p_gender, p_contact_info, p_email, p_insurance_policy);
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE schedule_appointment (
    p_patient_id IN NUMBER,
    p_doctor_id IN NUMBER,
    p_appointment_date IN DATE,
    p_reason IN VARCHAR2
) AS
BEGIN
    INSERT INTO appointments (patient_id, doctor_id, appointment_date, reason, status)
    VALUES (p_patient_id, p_doctor_id, p_appointment_date, p_reason, 'Scheduled');
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE get_patient_details_as_xml (
    p_patient_id IN NUMBER,
    p_xml OUT CLOB
) AS
BEGIN
    SELECT XMLROOT(
             XMLELEMENT("Patient",
                XMLFOREST(patient_id, first_name, last_name, dob, gender, contact_info, email, insurance_policy)
             ), VERSION '1.0', STANDALONE YES
           )
    INTO p_xml
    FROM patients
    WHERE patient_id = p_patient_id;
END;
/

BEGIN
    INSERT INTO patients (first_name, last_name, dob, gender, contact_info, email, insurance_policy)
    VALUES ('John', 'Doe', TO_DATE('1980-05-15', 'YYYY-MM-DD'), 'M', '123-456-7890', 'john.doe@example.com', 'POL12345');

    INSERT INTO doctors (first_name, last_name, specialization, contact_info, email)
    VALUES ('Dr. Jane', 'Smith', 'Cardiology', '987-654-3210', 'jane.smith@example.com');

    INSERT INTO appointments (patient_id, doctor_id, appointment_date, reason, status)
    VALUES (1, 1, TO_DATE('2025-01-15', 'YYYY-MM-DD'), 'Routine Checkup', 'Scheduled');
    COMMIT;
END;
/
